Instance of static class cant be created manually 

A single instance of singleton class can be initialized (lazily/eagerly) and singleton class contains a global point of access of that instance (when and how instance will be created, can be controlled)

Static is C# feature

Singleton is a design pattern

Static class cant be inherited (sealed) or cant inherit any other class/interface

Singleton class cant be inherited but can inherit any other class/interface (more flexible)

For sigleton thread safety can be handled manually through writing code

Static class and its members is thread safe

Singleton class contains both instance and static methods

Static class contains only static methods

Memory cant be allocated to static class instance but can be allocated to static class members

Memory gets allocated to singleton class instance

Singleton class has instance specific state (variable and methods) 

Static class does not have instance specific state (variable and methods)

singleton class isntance can be cloned (deep/shallow copy) which is not possible for static class

dependency injection can be used with Singleton but cant be used with static class

Singleton class can be initialized eagerly when CLR loads the class or can be initilized lazily

Static class gets initialized when the class loads

In singleton constructor/method, complex instance initialization logic can be implemented - not possible for static class as it cant be instantiated

Singleton class instance can be passed as method arg - not possible with static class

Singleton class instance can be disposed - static class can not be disposed


Static class (including its members) and Singleton class instance dont get collected by garbage collected as they dont get stored in stack rather they get stored in high frequency heap - memory can be released when program ends

All members of static class are static


Singleton class can be used for managign db connections, mamaging app configurations, caching, logging, data sharing, managing a global state (maintain state and access globally) etc. where a global point of access reqd - used to ensure a class has only 1 instance throughout app lifetime and a global point of access provided

Static class can be used to implement library, utility fn, extension method, helper etc. - used where maintaining state and obj initialization are not reqd - used to group related functionalities inside without creating instance


Static and Singleton both have 1 instance in memory through out app lifecycle, both holds global state of app which is common for all clients, both can be implemented as thread safe



